---
title: "Typed R"
date: "2024-08-01"
---

R is my *type* of programming language.

Base R is awesome.
It's pretty cool that R is both an [array language](https://en.wikipedia.org/wiki/Array_programming) and a [Lisp](https://en.wikipedia.org/wiki/Lisp_(programming_language)) (or at least heavily influenced by Lisp).
Like these two influences, R is a dynamic language.

I don't have well developed opinions on whether I prefer static or dynamically typed languages, but I saw an example from [The Typed Racket Guide](https://docs.racket-lang.org/ts-guide/quick.html) that I liked, so I thought it'd be fun to translate it to R and write about it.

# The Distance Formula

Do you remember this one from geometry?
In words, the distance between two points is the square root of the sum of the squared difference.
In math,

$$
d(p,q) = \sqrt{\sum_{i=1}^n(q_i - p_i) ^ 2}
$$

# Base R

It's pretty natural two represent each point as a numeric vector of length 2 in R.
With that assumption, here's a simple implementation.

```{r base}
distance <- function(p, q) {
  sqrt(sum((p - q) ^ 2))
}
p <- c(x = 1, y = 1)
q <- c(x = 5, y = 4)
distance(p, q)
```

What's not to like?
Well, what happens in if we accidentally pass in a numeric vector of length 3?\\

```{r bad}
r <- c(1, 2, 3)
distance(r, q)
```

We get an answer and a warning.
I think we can do better.

# Let's Get *{typed}*

The *{[typed](https://github.com/moodymudskipper/typed)}* package implements a type system fro R.
Let's try `distance` again, this time with type declarations.

```{r}
#| error: true
library(typed)
distance <- Double(1) ? function (p= ? Double(2), y= ? Double(2)) {
  sqrt(sum((p - q) ^ 2))
}
distance(r, q)
```

Now we're talking!
Throw an error and tell us why.
And we didn't even have to change the function body.

Also, we get return type information too.

```{r}
distance
```

Pretty cool!
Spread the word *{typed}* R is awesome!

Obligatory plot.

```{r}
plot(rbind(p, q), type = "o", pch = 19, xlim = c(0, 6), ylim = c(0, 5))
text(3, 3, "d(p,q)")
text(1, 1.5, "p")
text(5, 4.5, "q")
segments(0, p["y"], q["x"], p["y"], lty = "dashed")
segments(0, q["y"], q["x"], q["y"], lty = "dashed")
segments(p["x"], 0, p["x"], p["y"], lty = "dashed")
segments(q["x"], 0, q["x"], q["y"], lty = "dashed")
```
